
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Activation
import datetime
import yfinance as yf
from pandas_datareader import data as pdr
import datetime as dt
import pyrebase
%matplotlib inline
b="red"
yf.pdr_override()
start_dt = dt.datetime(2015, 1, 1)
end_dt = dt.datetime.now()
config = {
  "apiKey": "AIzaSyB9mAgRzQBkI3QyLOPyoA6kTNKoEVNtpnI",
  "authDomain": "gimisang-gung.firebaseapp.com",
  "databaseURL": "https://gimisang-gung-default-rtdb.firebaseio.com",
  "projectId": "gimisang-gung",
  "storageBucket": "gimisang-gung.appspot.com",
  "messagingSenderId": "588796164404",
  "appId": "1:588796164404:web:7e9975a07cb350bd850d61",
  "measurementId": "G-GC0BQXVHTV"
}
def predict():

  firebase = pyrebase.initialize_app(config)
  db = firebase.database()
  a=db.child("stock").get().val()
  name=a
  df = pdr.get_data_yahoo(a, start_dt, end_dt)
  df = df.loc[:, ["Open", "High", "Low", "Adj Close", "Volume"]]
  df = df.rename(columns={"Adj Close": "Close"})
  df.head()
  high_prices = df['High'].values
  low_prices = df['Low'].values
  mid_prices = (high_prices + low_prices) / 2
  seq_len = 50
  sequence_length = seq_len + 1


  result = []
  for index in range(len(mid_prices) - sequence_length):
      result.append(mid_prices[index: index + sequence_length])
  normalized_data = []
  for window in result:
      normalized_window = [((float(p) / float(window[0])) - 1) for p in window]
      normalized_data.append(normalized_window)

  result = np.array(normalized_data)

  row = int(round(result.shape[0]*0.9))
  train = result[:row, :]
  np.random.shuffle(train)

  x_train = train[:, :-1]
  print(x_train)
  x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
  y_train = train[:, -1]
  x_test = result[row:, :-1]
  x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
  y_test = result[row:, -1]
  x_train.shape, x_test.shape
  model = Sequential()

  model.add(LSTM(50, return_sequences=True, input_shape=(50, 1)))

  model.add(LSTM(64, return_sequences=False))

  model.add(Dense(1, activation='linear'))

  model.compile(loss='mse', optimizer='rmsprop')

  model.summary()
  model.fit(x_train, y_train,
      validation_data=(x_test, y_test),
      batch_size=40,
      epochs=20)
  pred = model.predict(x_test)
  a=0
  for i in pred:
    a+=float(i)+1;




  if (a / len(pred) > 1):
    q = "up"
  else:
    q = "down"
  db.update({"object": q})

while(True):
  predict()
